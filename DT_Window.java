/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UAS;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import java.awt.Dimension;
import java.awt.Toolkit;

/**
 *
 * @author ASUS A442UR
 */
public class DT_Window extends javax.swing.JFrame {
    String sumber;
    int TAG;
    /**
     * Creates new form DT_Window
     */
    public DT_Window() {
        initComponents();
        // mengambil ukuran layar
        Dimension layar = Toolkit.getDefaultToolkit().getScreenSize();

        // membuat titik x dan y
        int x = layar.width / 2  - this.getSize().width / 2;
        int y = layar.height / 2 - this.getSize().height / 2;

        this.setLocation(x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gambarScroll = new javax.swing.JScrollPane();
        labelSebelum = new javax.swing.JLabel();
        periksa = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        gambarScroll.setViewportView(labelSebelum);

        periksa.setText("Periksa");
        periksa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                periksaActionPerformed(evt);
            }
        });

        jMenu1.setText("Pilih Gambar");

        jMenuItem1.setText("Pilih");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Deteksi Tepi");

        jMenuItem2.setText("Canny");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Sobel");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Robert");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Prewette");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gambarScroll)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(periksa)
                .addContainerGap(734, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(periksa)
                .addGap(13, 13, 13)
                .addComponent(gambarScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static BufferedImage prosesgambar(String sumber) {
        BufferedImage image = null;
        try {
            image = ImageIO.read(new File(sumber));
        } catch (IOException ex) {
            Logger.getLogger(DT_Window.class.getName()).log(Level.SEVERE, null, ex);
        }
        return image;
    }
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser open = new JFileChooser();
        int cek = open.showOpenDialog(gambarScroll);
        if (cek == JFileChooser.APPROVE_OPTION) {
            sumber = open.getSelectedFile().getPath();
            BufferedImage bimg = prosesgambar(sumber);
        labelSebelum.setIcon(new ImageIcon(sumber));
        }
        TAG = 0;
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    public static BufferedImage resize(BufferedImage img, int newW, int newH) {
        int w = img.getWidth();
        int h = img.getHeight();
        BufferedImage dimg = new BufferedImage(newW, newH, img.getType());
        Graphics2D g = dimg.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g.drawImage(img, 0, 0, newW, newH, 0, 0, w, h, null);
        g.dispose();
        return dimg;
    }
    
    //  Sobel 
    
    public BufferedImage prewette (String sumber) {
        BufferedImage prosesGambar;
        BufferedImage loadIng = prosesgambar(sumber);
        int ukuranX = loadIng.getWidth();
        int ukuranY = loadIng.getHeight();
        prosesGambar = new BufferedImage(ukuranX, ukuranY, BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = prosesGambar.getGraphics();
        g.drawImage(loadIng, 0, 0, null);
        WritableRaster raster = prosesGambar.getRaster();
        for (int x = 1; x < (ukuranX - 1); x++) {
            for (int y = 1; y < (ukuranY - 1); y++) {
                int rgb11 = loadIng.getRGB((x - 1), (y - 1));
                int p11 = (rgb11 >> 8) & 0xff;
                int rgb12 = loadIng.getRGB(x, (y - 1));
                int p12 = (rgb12 >> 8) & 0xff;
                int rgb13 = loadIng.getRGB((x + 1), (y - 1));
                int p13 = (rgb13 >> 8) & 0xff;
                int rgb21 = loadIng.getRGB((x - 1), (y));
                int p21 = (rgb21 >> 8) & 0xff;
                int rgb22 = loadIng.getRGB(x, y);
                int p22 = (rgb22 >> 8) & 0xff;
                int rgb23 = loadIng.getRGB((x + 1), y);
                int p23 = (rgb23 >> 8) & 0xff;
                int rgb31 = loadIng.getRGB((x - 1), (y + 1));
                int p31 = (rgb31 >> 8) & 0xff;
                int rgb32 = loadIng.getRGB(x, (y + 1));
                int p32 = (rgb32 >> 8) & 0xff;
                int rgb33 = loadIng.getRGB((x + 1), (y + 1));
                int p33 = (rgb33 >> 8) & 0xff;
                int tepi = (int) ((p11 * -1) + (p12 * -1) + (p13 * -1)
                        + (p21 * 0) + (p22 * 0) + (p23 * 0)
                        + (p31 * 1) + (p32 * 1) + (p33 * 1));
                if (tepi < 0) {
                    tepi = 0;
                }
                if (tepi > 255) {
                    tepi = 255;
                }
                raster.setSample(x, y, 0, tepi);
            }
        }
        return prosesGambar;
    }
    
//  End
    
//  Sobel 
    
    public BufferedImage sobel(String sumber) {
        BufferedImage prosesGambar;
        BufferedImage loadIng = prosesgambar(sumber);
        int ukuranX = loadIng.getWidth();
        int ukuranY = loadIng.getHeight();
        prosesGambar = new BufferedImage(ukuranX, ukuranY, BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = prosesGambar.getGraphics();
        g.drawImage(loadIng, 0, 0, null);
        WritableRaster raster = prosesGambar.getRaster();
        for (int x = 1; x < (ukuranX - 1); x++) {
            for (int y = 1; y < (ukuranY - 1); y++) {
                int rgb11 = loadIng.getRGB((x - 1), (y - 1));
                int p11 = (rgb11 >> 8) & 0xff;
                int rgb12 = loadIng.getRGB(x, (y - 1));
                int p12 = (rgb12 >> 8) & 0xff;
                int rgb13 = loadIng.getRGB((x + 1), (y - 1));
                int p13 = (rgb13 >> 8) & 0xff;
                int rgb21 = loadIng.getRGB((x - 1), (y));
                int p21 = (rgb21 >> 8) & 0xff;
                int rgb22 = loadIng.getRGB(x, y);
                int p22 = (rgb22 >> 8) & 0xff;
                int rgb23 = loadIng.getRGB((x + 1), y);
                int p23 = (rgb23 >> 8) & 0xff;
                int rgb31 = loadIng.getRGB((x - 1), (y + 1));
                int p31 = (rgb31 >> 8) & 0xff;
                int rgb32 = loadIng.getRGB(x, (y + 1));
                int p32 = (rgb32 >> 8) & 0xff;
                int rgb33 = loadIng.getRGB((x + 1), (y + 1));
                int p33 = (rgb33 >> 8) & 0xff;
                int tepi = (int) ((p11 * -1) + (p12 * -2) + (p13 * -1)
                        + (p21 * 0) + (p22 * 0) + (p23 * 0)
                        + (p31 * 1) + (p32 * 2) + (p33 * 1));
                if (tepi < 0) {
                    tepi = 0;
                }
                if (tepi > 255) {
                    tepi = 255;
                }
                raster.setSample(x, y, 0, tepi);
            }
        }
        return prosesGambar;
    }
    
//  End
    
//    Canny
    
    public BufferedImage canny(String sumber) {
        BufferedImage prosesGambar;
        BufferedImage loadIng = prosesgambar(sumber);
        int ukuranX = loadIng.getWidth();
        int ukuranY = loadIng.getHeight();
        prosesGambar = new BufferedImage(ukuranX, ukuranY, BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = prosesGambar.getGraphics();
        g.drawImage(loadIng, 0, 0, null);
        WritableRaster raster = prosesGambar.getRaster();
        for (int x = 1; x < (ukuranX - 1); x++) {
            for (int y = 1; y < (ukuranY - 1); y++) {
                int rgb11 = loadIng.getRGB((x - 1), (y - 1));
                int p11 = (rgb11 >> 8) & 0xff;
                int rgb12 = loadIng.getRGB(x, (y - 1));
                int p12 = (rgb12 >> 8) & 0xff;
                int rgb13 = loadIng.getRGB((x + 1), (y - 1));
                int p13 = (rgb13 >> 8) & 0xff;
                int rgb21 = loadIng.getRGB((x - 1), (y));
                int p21 = (rgb21 >> 8) & 0xff;
                int rgb22 = loadIng.getRGB(x, y);
                int p22 = (rgb22 >> 8) & 0xff;
                int rgb23 = loadIng.getRGB((x + 1), y);
                int p23 = (rgb23 >> 8) & 0xff;
                int rgb31 = loadIng.getRGB((x - 1), (y + 1));
                int p31 = (rgb31 >> 8) & 0xff;
                int rgb32 = loadIng.getRGB(x, (y + 1));
                int p32 = (rgb32 >> 8) & 0xff;
                int rgb33 = loadIng.getRGB((x + 1), (y + 1));
                int p33 = (rgb33 >> 8) & 0xff;
                int tepi = (int) ((p11 * -1) + (p12 * -1) + (p13 * -1)
                        + (p21 * -1) + (p22 * 8) + (p23 * -1)
                        + (p31 * -1) + (p32 * -1) + (p33 * -1));
                if (tepi < 0) {
                    tepi = 0;
                }
                if (tepi > 255) {
                    tepi = 255;
                }
                raster.setSample(x, y, 0, tepi);
            }
        }
        return prosesGambar;
    }
    
//    End Canny
    
//    Robert
    
        public BufferedImage robert(String sumber) {
        BufferedImage prosesGambar;
        BufferedImage loadIng = prosesgambar(sumber);
        int ukuranX = loadIng.getWidth();
        int ukuranY = loadIng.getHeight();
        prosesGambar = new BufferedImage(ukuranX, ukuranY, BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = prosesGambar.getGraphics();
        g.drawImage(loadIng, 0, 0, null);
        WritableRaster raster = prosesGambar.getRaster();
        for (int x = 1; x < (ukuranX - 1); x++) {
            for (int y = 1; y < (ukuranY - 1); y++) {
                int rgb11 = loadIng.getRGB((x - 1), (y - 1));
                int p11 = (rgb11 >> 8) & 0xff;
                int rgb21 = loadIng.getRGB((x - 1), (y));
                int p21 = (rgb21 >> 8) & 0xff;
                int tepi = (int) ((p11 * -1) + (p21 * 1));
                        
                        
                if (tepi < 0) {
                    tepi = 0;
                }
                if (tepi > 255) {
                    tepi = 255;
                }
                raster.setSample(x, y, 0, tepi);
            }
        }
        return prosesGambar;
    }
    
//    End
    
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        BufferedImage grayscale = canny(sumber);
        int x = labelSebelum.getWidth();
        int y = labelSebelum.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(grayscale, x, y));
        labelSebelum.setIcon(imageIcon);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void periksaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_periksaActionPerformed
        if(periksa.isSelected()){
            jMenuItem1ActionPerformed(evt);
        }else{
            jMenuItem2ActionPerformed(evt);
        }
    }//GEN-LAST:event_periksaActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        BufferedImage grayscale = sobel(sumber);
        int x = labelSebelum.getWidth();
        int y = labelSebelum.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(grayscale, x, y));
        labelSebelum.setIcon(imageIcon);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        BufferedImage grayscale = robert(sumber);
        int x = labelSebelum.getWidth();
        int y = labelSebelum.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(grayscale, x, y));
        labelSebelum.setIcon(imageIcon);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        BufferedImage grayscale = prewette(sumber);
        int x = labelSebelum.getWidth();
        int y = labelSebelum.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(grayscale, x, y));
        labelSebelum.setIcon(imageIcon);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DT_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DT_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DT_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DT_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DT_Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane gambarScroll;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JLabel labelSebelum;
    private javax.swing.JCheckBox periksa;
    // End of variables declaration//GEN-END:variables
}
